<?php

namespace Bkstg\FOSUserBundle\Repository;

use Bkstg\CoreBundle\Entity\Production;
use Bkstg\FOSUserBundle\Entity\ProductionMembership;
use Bkstg\FOSUserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\Expr\Join;
use MidnightLuke\GroupSecurityBundle\Model\GroupMembershipInterface;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * ProfileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProfileRepository extends EntityRepository
{
    public function findProfile(UserInterface $user)
    {
        $profile = null;

        // Get a query builder and build a query.
        $qb = $this->createQueryBuilder('p');
        $query = $qb
            ->join('p.user', 'u')
            ->andWhere($qb->expr()->eq('u', ':user'))
            ->setParameter('user', $user)
            ->getQuery();

        try {
            $profile = $query->getSingleResult();
        } catch (NoResultException $e) {
            // Nothing to be concerned about.
        }

        return $profile;
    }

    public function findProfileByUsername(string $username)
    {
        $profile = null;

        // Get a query builder and build a query.
        $qb = $this->createQueryBuilder('p');
        $query = $qb
            ->join('p.user', 'u')
            ->andWhere($qb->expr()->eq('u.username', ':username'))
            ->setParameter('username', $username)
            ->getQuery();

        try {
            $profile = $query->getSingleResult();
        } catch (NoResultException $e) {
            // Nothing to be concerned about.
        }

        return $profile;
    }

    public function findAllEnabled(Production $production = null)
    {
        // Forward to the correct helper for the query.
        if ($production === null) {
            return $this->findAllGlobalEnabled();
        }

        return $this->findAllProductionEnabled($production);
    }

    public function findAllProductionEnabled(Production $production)
    {
        $qb = $this->createQueryBuilder('p');
        $query = $qb
            ->join('p.membership', 'm')
            ->andWhere($qb->expr()->eq('m.group', ':production'))
            ->andWhere($qb->expr()->eq('m.status', ':membership_status'))
            ->andWhere($qb->expr()->orX(
                $qb->expr()->isNull('m.expiry'),
                $qb->expr()->gt('m.expiry', ':now')
            ))
            ->setParameter('membership_status', GroupMembershipInterface::STATUS_ACTIVE)
            ->setParameter('now', new \DateTime())
            ->setParameter('production', $production)
            ->getQuery();

        return $query->getResult();
    }

    public function findAllGlobalEnabled()
    {
        // Get a query builder and build a query.
        $qb = $this->createQueryBuilder('p');
        $query = $qb
            ->join('p.user', 'u')
            ->andWhere($qb->expr()->eq('u.enabled', 1))
            ->getQuery();
        return $query->getResult();
    }

    public function findAllBlocked()
    {
        // Get a query builder and build a query.
        $qb = $this->createQueryBuilder('p');
        $query = $qb
            ->join('p.user', 'u')
            ->andWhere($qb->expr()->eq('u.enabled', 0))
            ->getQuery();

        return $query->getResult();
    }
}
