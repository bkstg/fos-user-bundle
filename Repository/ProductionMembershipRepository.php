<?php

namespace Bkstg\FOSUserBundle\Repository;

use MidnightLuke\GroupSecurityBundle\Model\GroupMembershipInterface;
use Bkstg\CoreBundle\Entity\Production;
use Bkstg\FOSUserBundle\Entity\User;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\EntityRepository;

/**
 * ProductionMembershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionMembershipRepository extends EntityRepository
{
    public function findActiveMemberships(User $user)
    {
        $qb = $this->createQueryBuilder('m');
        return $qb
            ->join('m.group', 'g')

            // Add conditions.
            ->andWhere($qb->expr()->eq('m.member', ':member'))
            ->andWhere($qb->expr()->eq('m.status', ':membership_status'))
            ->andWhere($qb->expr()->orX(
                $qb->expr()->isNull('m.expiry'),
                $qb->expr()->gt('m.expiry', ':now')
            ))
            ->andWhere($qb->expr()->eq('g.status', ':production_status'))
            ->andWhere($qb->expr()->orX(
                $qb->expr()->isNull('g.expiry'),
                $qb->expr()->gt('g.expiry', ':now')
            ))

            // Add parameters.
            ->setParameter('member', $user)
            ->setParameter('membership_status', GroupMembershipInterface::STATUS_ACTIVE)
            ->setParameter('production_status', Production::STATUS_ACTIVE)
            ->setParameter('now', new \DateTime())

            // Order by and get results.
            ->orderBy('g.name')
            ->getQuery()
            ->getResult();
    }

    public function findAllActive(Production $production)
    {
        $qb = $this->createQueryBuilder('m');
        return $qb
            // Add conditions.
            ->andWhere($qb->expr()->eq('m.status', ':membership_status'))
            ->andWhere($qb->expr()->orX(
                $qb->expr()->isNull('m.expiry'),
                $qb->expr()->gt('m.expiry', ':now')
            ))
            ->andWhere($qb->expr()->eq('m.group', ':production'))

            // Add parameters.
            ->setParameter('membership_status', GroupMembershipInterface::STATUS_ACTIVE)
            ->setParameter('production', $production)
            ->setParameter('now', new \DateTime())

            // Order by and get results.
            ->getQuery()
            ->getResult();
    }

    public function findAllInactive(Production $production)
    {
        $qb = $this->createQueryBuilder('m');
        return $qb
            // Add conditions.
            ->andWhere($qb->expr()->eq('m.status', ':membership_status'))
            ->orWhere($qb->expr()->andX(
                $qb->expr()->isNotNull('m.expiry'),
                $qb->expr()->lt('m.expiry', ':now')
            ))
            ->andWhere($qb->expr()->eq('m.group', ':production'))

            // Add parameters.
            ->setParameter('membership_status', GroupMembershipInterface::STATUS_BLOCKED)
            ->setParameter('production', $production)
            ->setParameter('now', new \DateTime())

            // Order by and get results.
            ->getQuery()
            ->getResult();
    }

    public function findMembershipsByGroup(Production $production)
    {
        $qb = $this->createQueryBuilder('m');
        return $qb
            ->addSelect('u')
            ->join('m.group', 'g')
            ->join('m.member', 'u')
            ->andWhere($qb->expr()->eq('g', ':group'))
            ->setParameter('group', $production)
            ->getQuery()
            ->getResult();
    }
}
